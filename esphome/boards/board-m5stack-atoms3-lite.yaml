substitutions:
  restart_button: "Restart device"
  led_brightness: "LED Brightness"
  led_switch: "LED Aan/Uit"

###
## M5Stack atom S3 lite board, in combination with this base from m5stack:
## https://shop.m5stack.com/products/atomic-rs485-base
## NOTE: there are other RS485 boards from m5stack, these are not tested (like the tail-rs485)
#
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino, espidf

# uart for modbus rtu  NOT_TESTED_YET
uart:
  id: mod_bus
  baud_rate: 9600
  stop_bits: 1
  tx_pin: GPIO6
  rx_pin: GPIO5

### modbus ###
modbus:
  id: modbus1
  uart_id: mod_bus
  send_wait_time: 200ms
  flow_control_pin: GPIO7  

# i2c for extra sensor
i2c:
  - id: bus_a
    sda: GPIO2
    scl: GPIO1

# Enable/Disable logging
logger:
  logs:
    modbus_controller.sensor: INFO
    modbus_controller.output: INFO
    modbus.number: INFO
    esp32.preferences: INFO
    sensor: INFO
    text_sensor: INFO
    dht.sensor: INFO
    switch: INFO
    button: INFO
    number: INFO
  # baud_rate: 0  # <--- super important! for ESP8266

wifi:
  ap:
    ssid: "${name}"
    password: "configesp"

captive_portal:

# Enable Web server.
web_server:
  port: 80

ota:
  platform: esphome

light:
  - platform: esp32_rmt_led_strip
    name: Led
    id: led
    internal: true
    rgb_order: GRB
    pin: GPIO35
    num_leds: 1
    chipset: ws2812
    restore_mode: RESTORE_DEFAULT_OFF

#G41=Button
binary_sensor:
  - platform: gpio
    name: Buttonw
    id: g41button
    pin:
      number: GPIO39
      inverted: true
      mode:
        input: true
#        pullup: true
    internal: true
    filters:
      - delayed_off: 10ms
    # Toggle the switch when the pushbutton is pressed
    on_press:
      then:
        - switch.toggle: ecodan_led_switch

###  ESP restart button
button:
  - platform: restart
    id: restart_button
    name: ${restart_button}

number:
  - platform: template
    id: led_brightness
    name: ${led_brightness}
    icon: mdi:toggle-switch-variant
    mode: slider
    entity_category: config
    optimistic: true
    min_value: 0
    max_value: 100
    step: 10
    initial_value: 70
    restore_value: yes
    unit_of_measurement: "%"
    on_value:
      then:
        - if:
            condition:
              light.is_on: led
            then:
              - light.turn_on:
                  id: led
                  brightness: !lambda |- 
                    return id(led_brightness).state / 100.0;

switch:
  - platform: template
    id: ecodan_led_switch
    name: ${led_switch}
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON 
    lambda: return id(ecodan_led_switch).state;
    turn_on_action:
      - light.turn_on:
          id: led
          brightness: !lambda |-
            // output value must be in range 0 - 1.0
            return id(led_brightness).state / 100.0;
    turn_off_action:
      - light.turn_off:
          id: led

